name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run unit tests
        run: |
          cd apps/web
          npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      node:
        image: node:18
        ports:
          - 3000:3000
          - 3001:3001
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Start background service
        run: |
          cd apps/web
          npm run background &
          sleep 10

      - name: Start web application
        run: |
          cd apps/web
          npm run start &
          sleep 15

      - name: Run integration tests
        run: |
          cd apps/web
          npm run test:integration

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: apps/web/test-results/

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Start services
        run: |
          cd apps/web
          npm run dev:full &
          sleep 20

      - name: Run E2E tests
        run: |
          cd apps/web
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: apps/web/test-results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Build application
        run: |
          cd apps/web
          npm run build

      - name: Start production server
        run: |
          cd apps/web
          npm run start &
          sleep 10

      - name: Run performance tests
        run: |
          cd apps/web
          npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: apps/web/performance-results/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: performance-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run security audit
        run: |
          cd apps/web
          npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: security-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run ESLint
        run: |
          cd apps/web
          npm run lint

      - name: Run TypeScript type checking
        run: |
          cd apps/web
          npx tsc --noEmit

      - name: Check code formatting
        run: |
          cd apps/web
          npm run format:check

      - name: Run SonarQube analysis
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scannerHome: ${{ github.workspace }}/sonar-scanner

  # Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests, code-quality]
    if: always()
    
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-results/

      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('## Test Results Summary'));
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Test Results Summary
            
            ### Unit Tests
            - Status: ${{ needs.unit-tests.result }}
            
            ### Integration Tests
            - Status: ${{ needs.integration-tests.result }}
            
            ### E2E Tests
            - Status: ${{ needs.e2e-tests.result }}
            
            ### Performance Tests
            - Status: ${{ needs.performance-tests.result }}
            
            ### Security Tests
            - Status: ${{ needs.security-tests.result }}
            
            ### Code Quality
            - Status: ${{ needs.code-quality.result }}
            
            ---
            *This comment was automatically generated by the test workflow.*`
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Test Results Summary
            
            ### Unit Tests
            - Status: ${{ needs.unit-tests.result }}
            
            ### Integration Tests
            - Status: ${{ needs.integration-tests.result }}
            
            ### E2E Tests
            - Status: ${{ needs.e2e-tests.result }}
            
            ### Performance Tests
            - Status: ${{ needs.performance-tests.result }}
            
            ### Security Tests
            - Status: ${{ needs.security-tests.result }}
            
            ### Code Quality
            - Status: ${{ needs.code-quality.result }}
            
            ---
            *This comment was automatically generated by the test workflow.*`
              });
            }