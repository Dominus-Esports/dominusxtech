name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/web
        npm ci
    
    - name: Run linting
      run: |
        cd apps/web
        npm run lint
    
    - name: Run type checking
      run: |
        cd apps/web
        npx tsc --noEmit
    
    - name: Build application
      run: |
        cd apps/web
        npm run build
    
    - name: Run tests (if available)
      run: |
        cd apps/web
        npm test --if-present

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/web
        npm ci
    
    - name: Build for production
      run: |
        cd apps/web
        npm run build
      env:
        NEXT_PUBLIC_APP_ENV: production
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./apps/web
        vercel-args: '--prod'

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        cd apps/web
        npm audit --audit-level moderate
    
    - name: Check for vulnerabilities
      run: |
        cd apps/web
        npm audit --audit-level high || exit 1

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate documentation
      run: |
        # Check if README exists and has proper structure
        if [ ! -f "apps/web/README.md" ]; then
          echo "‚ùå README.md is missing"
          exit 1
        fi
        
        # Check for required sections
        if ! grep -q "## üöÄ Features" apps/web/README.md; then
          echo "‚ùå README.md missing Features section"
          exit 1
        fi
        
        if ! grep -q "## üîß Usage" apps/web/README.md; then
          echo "‚ùå README.md missing Usage section"
          exit 1
        fi
        
        echo "‚úÖ Documentation validation passed"
    
    - name: Generate API documentation
      run: |
        echo "üìö API documentation would be generated here"
        # Future: Add API documentation generation